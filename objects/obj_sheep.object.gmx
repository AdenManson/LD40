<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_sheep</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variable Init

spd    = .5;
delta  = 0;
inst   = -1;
moving = false

canMove = true;

// Disease
randomize();
setDiseased = true;
diseased = false;
i = 0;

// Freezing
freezing = false;
setFreezing = true;
j = 0;

// Lightning
burn = false;

// Wolves
stressed = false;

// Resources
randomize();
if(room == rm_game) {
    if(!instance_exists(obj_coin_effector)) {
        alarm[4] = irandom_range(400,500)+global.sheepAmount*12;
    } else {
        alarm[4] = irandom_range(500,800)+global.sheepAmount*12;
    }
}

if(room == rm_title) {
    image_index = irandom(sprite_get_number(sprite_index));
    image_xscale = choose(1,-1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn Sheep Coin

if(!global.paused) {
    if(global.sheepAmount &gt; 20) {
        var shouldSpawn = irandom(floor(global.sheepAmount/20));
        if(shouldSpawn == 1) {
            instance_create(x,y,obj_coin);
            alarm[4] = irandom_range(800,900) + global.sheepAmount*3;
        }
    } else {
        instance_create(x,y,obj_coin);
        alarm[4] = irandom_range(800,900);
    }
} else {
    alarm[4] = 10;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Begin Freezing

freezing = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Freeze to death

if(freezing) {

        canMove = false;
        speed = 0;
    
        image_blend = c_white;
        sprite_index = spr_sheep_freeze;
        audio_play_sound(sd_freeze,10,0);
        audio_sound_pitch(sd_freeze,random_range(0.8,1.2));
        image_speed = .3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Blood Splatter

var inst = collision_circle(x,y,15,obj_sheep, false, true)
with (inst) {
    if(!inst.diseased) {
        var sound = choose(sd_disease_2, sd_disease_3);
        audio_play_sound(sound,10,0);
        create_blood(x,y);
        global.sheepAmount--;
        instance_destroy(inst);
    }
}

instance_create(0,0,obj_screen_shake);
var sound = choose(sd_disease_2, sd_disease_3);
audio_play_sound(sound,10,0);
create_blood(x,y);
global.sheepAmount--;
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Disease
//randomize();
//random_set_seed(delta_time);
//diseased = choose(0,0,0,0,0,0,0,0,0,0,0,0,1); // temp
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Functionality

// Movement

if(!global.paused) {

delta = 60/1000000 * delta_time;

var nearestObject = instance_nearest(mouse_x,mouse_y,obj_sheep);

if(canMove) {
    if(nearestObject != self) {
        if(distance_to_point(mouse_x,mouse_y) &gt; 4 + point_distance(mouse_x,mouse_y,nearestObject.x,nearestObject.y)) {
            move_towards_point(mouse_x,mouse_y,spd*delta);
            moving = true;
        } else {
            speed = 0;
            moving = false;
        }
    } else {
        if(distance_to_point(mouse_x,mouse_y) &gt; 5) { // add crowding function
            move_towards_point(mouse_x,mouse_y,spd*delta);
            moving = true;
        } else {
            speed = 0;
            moving = false;
        }
    }
}

clamp(x,0+sprite_width, room_width-sprite_width);
clamp(y,0+sprite_height, room_height-sprite_height);

if(mouse_check_button(mb_left) &amp;&amp; !freezing) {
    spd = .9;
} else {
    spd = .5;
}

if(mouse_check_button(mb_left) &amp;&amp; freezing) {
    spd = .65;
}

if(canMove) {

    // Collision
    if(instance_number(obj_sheep) &lt; 20) {
        with(obj_sheep) {
            if(distance_to_object(other.id) &lt; 6) {
                if(point_distance(mouse_x,mouse_y,x,y) &gt; (point_distance(mouse_x,mouse_y,other.x,other.y))) {
                    speed = 0;
                    moving = false;
                }
            }
        }
    } else {
        with(obj_sheep) {
            if(distance_to_object(other.id) &lt; 0.4) {
                if(point_distance(mouse_x,mouse_y,x,y) &gt; (point_distance(mouse_x,mouse_y,other.x,other.y))) {
                    speed = 0;
                    moving = false;
                }
            }
        }
    }
    
    // Sprite Control
    
    if(room != rm_title) {
        if(mouse_x &lt; x) {
            image_xscale = -1;
        } else {
            image_xscale = 1;
        }
    }
    
    if(moving) &amp;&amp; (!burn) &amp;&amp; (!freezing) {
        sprite_index = spr_sheep_walk;
        image_speed = 0.1+spd/8;
        
    } else if (!burn) &amp;&amp; (!freezing) {
        sprite_index = spr_sheep;
        image_speed = 0;
    }
}

// Disease

if(diseased) {
    if(i == 1) {
        alarm[1] = 200;
    }
    speed = 0;

    canMove = false;
    image_blend = merge_colour(c_white,c_green,i/200);
    
    if(image_xscale = -1) image_xscale = random_range(-0.8,-1.2);  else  image_xscale = random_range(0.8,1.2);
    image_yscale = random_range(0.8,1.2);
    
    i++;
}

// Freezing

/*if(instance_exists(obj_snow_ps)) {
    if(instance_exists(obj_fire_pit)) {
        if(distance_to_object(obj_fire_pit) &gt; 70) &amp;&amp; (obj_fire_pit.placed == false) {
            if(setFreezing) {
                alarm[3] = 400;
                setFreezing = false;
            }
        } else {
            if(!diseased) { image_blend = c_white; }
            freezing = false;
            if(alarm[3] &lt; 0) { setFreezing = true; j = 0; }
        }
    }*/
    
if(instance_exists(obj_fire_ps) &amp;&amp; (instance_exists(obj_snow_ps)) &amp;&amp; distance_to_object(obj_fire_pit) &gt; 70 + global.sheepAmount/4) {
    if(setFreezing) {
        alarm[3] = irandom_range(350,400);
        setFreezing = false;
    }
} else if(instance_exists(obj_fire_ps) &amp;&amp; (instance_exists(obj_snow_ps)) &amp;&amp; distance_to_object(obj_fire_pit) &lt;= 70 + global.sheepAmount/4) {
    freezing = false;
    if(!diseased)    { image_blend = c_white;     }
    if(alarm[3] &lt; 0) { setFreezing = true; j = 0; }
}

if(!instance_exists(obj_snow_ps)) {
    freezing = false;
    if(!diseased) {
        if(room != rm_title) {
            if(mouse_x &lt; x) {
                image_xscale = -1;
                image_yscale = 1;
            } else {
                image_xscale = 1;
                image_yscale = image_xscale;
            }
        }
        image_blend = c_white;
    }
}

if(!instance_exists(obj_fire_ps) &amp;&amp; (instance_exists(obj_snow_ps))) {
    if(setFreezing) {
        alarm[3] = irandom_range(350,400);
        setFreezing = false;
    }
}
    
if(freezing) {
    if(j == 0) {
        alarm[2] = 200;
    }
        
    spd = 0.4;
    image_blend = merge_colour(c_white,make_colour_rgb(34,54,180),1-alarm[2]/200);
                    
    if(image_xscale = -1) { 
        image_xscale = random_range(-0.8,-1.2); 
    } else { 
        image_xscale = random_range(0.8,1.2); image_yscale = random_range(0.8,1.2); 
    }
                    
    j = 1;
}
    

// Lightning

if(place_meeting(x,y,obj_lightning_marker)) {
    if(instance_exists(obj_lightning)) {
        burn = true;
    }
}

if(burn) {
    sprite_index = spr_sheep_burn;
    image_speed = 0.3;
    
    canMove = false;
    speed = 0;
        
    if(image_index &gt; 0 &amp;&amp; image_index &lt; 7) {
        x++;
        y++;
        x--;
        y--;
    }
}


// Wolves

if(instance_exists(obj_wolf)) {
    var wolf = instance_nearest(x,y,obj_wolf);
    
    if(wolf.inst == self) {
        if(place_meeting(x,y,wolf)) {
            audio_play_sound(sd_disease_1,10,0);
            create_blood(x,y);
            global.sheepAmount--;
            instance_destroy();
        }
        
        if(!wolf.finished) {
            stressed = true;
            sprite_index = spr_sheep_stress;
            image_speed = 0.6;
        } else {
            stressed = false;
            image_speed = 0.1+spd/8;
        }
    }
}

// Boat

if(y &gt; 0) &amp;&amp; (instance_exists(obj_boat_back)) &amp;&amp; (obj_boat_back.depart) {
    var sound = choose(sd_disease_2, sd_disease_3);
    audio_play_sound(sound,10,0);
    create_blood(x,y);
    global.sheepAmount--;
    instance_destroy();
}

if(room != rm_game) {
    canMove = false;
    speed = 0;
}
} else { speed = 0; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Deaths

if(sprite_index == spr_sheep_burn) {
    instance_destroy();
    global.sheepAmount--;
}

if(sprite_index == spr_sheep_freeze) {
    instance_destroy();
    audio_play_sound(sd_ice_break,10,0);
    audio_sound_pitch(sd_ice_break,random_range(0.8,1.2));
    global.sheepAmount--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Shadow
if(!burn) || (!freezing) {
    draw_sprite_ext(sprite_index, 0, x, y+sprite_height*0.5, image_xscale, -0.5, image_angle, c_black, 0.5);
}
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
